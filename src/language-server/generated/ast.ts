/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export type Expression = ClassicFunction;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export interface Code extends AstNode {
    readonly $type: 'Code';
    statements: Array<Statement>
}

export const Code = 'Code';

export function isCode(item: unknown): item is Code {
    return reflection.isInstance(item, Code);
}

export interface Param extends AstNode {
    readonly $container: ClassicFunction;
    readonly $type: 'Param';
    name: string
}

export const Param = 'Param';

export function isParam(item: unknown): item is Param {
    return reflection.isInstance(item, Param);
}

export interface Statement extends AstNode {
    readonly $container: ClassicFunction | Code | ConstStatement | LetStatement | Statement;
    readonly $type: 'ClassicFunction' | 'ConstStatement' | 'LetStatement' | 'Statement';
    body: Array<Statement>
}

export const Statement = 'Statement';

export function isStatement(item: unknown): item is Statement {
    return reflection.isInstance(item, Statement);
}

export interface ClassicFunction extends Statement {
    readonly $container: ClassicFunction | Code | ConstStatement | LetStatement | Statement;
    readonly $type: 'ClassicFunction';
    body: Array<Statement>
    name: string
    params: Array<Param>
}

export const ClassicFunction = 'ClassicFunction';

export function isClassicFunction(item: unknown): item is ClassicFunction {
    return reflection.isInstance(item, ClassicFunction);
}

export interface ConstStatement extends Statement {
    readonly $container: ClassicFunction | Code | ConstStatement | LetStatement | Statement;
    readonly $type: 'ConstStatement';
    name: string
    value: Expression
}

export const ConstStatement = 'ConstStatement';

export function isConstStatement(item: unknown): item is ConstStatement {
    return reflection.isInstance(item, ConstStatement);
}

export interface LetStatement extends Statement {
    readonly $container: ClassicFunction | Code | ConstStatement | LetStatement | Statement;
    readonly $type: 'LetStatement';
    name: string
    value: Expression
}

export const LetStatement = 'LetStatement';

export function isLetStatement(item: unknown): item is LetStatement {
    return reflection.isInstance(item, LetStatement);
}

export interface ByteScriptAstType {
    ClassicFunction: ClassicFunction
    Code: Code
    ConstStatement: ConstStatement
    Expression: Expression
    LetStatement: LetStatement
    Param: Param
    Statement: Statement
}

export class ByteScriptAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['ClassicFunction', 'Code', 'ConstStatement', 'Expression', 'LetStatement', 'Param', 'Statement'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ClassicFunction: {
                return this.isSubtype(Statement, supertype) || this.isSubtype(Expression, supertype);
            }
            case ConstStatement:
            case LetStatement: {
                return this.isSubtype(Statement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Code': {
                return {
                    name: 'Code',
                    mandatory: [
                        { name: 'statements', type: 'array' }
                    ]
                };
            }
            case 'Statement': {
                return {
                    name: 'Statement',
                    mandatory: [
                        { name: 'body', type: 'array' }
                    ]
                };
            }
            case 'ClassicFunction': {
                return {
                    name: 'ClassicFunction',
                    mandatory: [
                        { name: 'body', type: 'array' },
                        { name: 'body', type: 'array' },
                        { name: 'params', type: 'array' }
                    ]
                };
            }
            case 'ConstStatement': {
                return {
                    name: 'ConstStatement',
                    mandatory: [
                        { name: 'body', type: 'array' }
                    ]
                };
            }
            case 'LetStatement': {
                return {
                    name: 'LetStatement',
                    mandatory: [
                        { name: 'body', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new ByteScriptAstReflection();
