import {
	createDefaultModule,
	createDefaultSharedModule,
	DefaultSharedModuleContext,
	inject,
	LangiumServices,
	LangiumSharedServices,
	Module,
	PartialLangiumServices,
} from 'langium'
import {ByteScriptGeneratedModule, ByteScriptGeneratedSharedModule} from './generated/module'
import {ByteScriptValidator, registerValidationChecks} from './bytescript-validator'

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ByteScriptAddedServices = {
	validation: {
		ByteScriptValidator: ByteScriptValidator
	}
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ByteScriptServices = LangiumServices & ByteScriptAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ByteScriptModule: Module<ByteScriptServices, PartialLangiumServices & ByteScriptAddedServices> = {
	validation: {
		ByteScriptValidator: () => new ByteScriptValidator(),
	},
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createByteScriptServices(context: DefaultSharedModuleContext): {
	shared: LangiumSharedServices
	ByteScript: ByteScriptServices
} {
	const shared = inject(createDefaultSharedModule(context), ByteScriptGeneratedSharedModule)
	const ByteScript = inject(createDefaultModule({shared}), ByteScriptGeneratedModule, ByteScriptModule)
	shared.ServiceRegistry.register(ByteScript)
	registerValidationChecks(ByteScript)
	return {shared, ByteScript}
}
